#!/bin/bash

#
# This script is only meant to be used by release managers.
# It assumes the following:
# 1. you have a github fork on the ready where you can push&pull
# 2. you can push new refs to djangoCMS origin
# 3. you have a transifex account with access to djangoCMS project
#
# License: MIT

set -e

base_branch=develop
upstream_source=git@github.com:django-cms/django-cms.git
upstream_pattern='github\.com.django-cms/django-cms\.git$'

RED="\033[31;1m"
GREEN="\033[32;1m"
YELLOW="\033[33;1m"
BLUE="\033[34;1m"
NORMAL="\033[0m"

EDITOR=vim

SCRIPTS=$(dirname "$(realpath "$0")")

status() {
    echo -e "${YELLOW}$1${NORMAL}"
}

error() {
    echo -e "${RED}$*${NORMAL}"
}

success() {
    echo -e "${GREEN}$*${NORMAL}"
}

review() {
    echo -e "** Please ${BLUE}review ${YELLOW}$1${NORMAL}"
    echo -e "${BLUE}Press enter${NORMAL} to continue in ${EDITOR}"
    read -r
    ${EDITOR} "$1"
}

# Preparations:

# checking we have all necessary tools
CMDS="git awk sed pip npm xargs ${EDITOR}"
for cmd in ${CMDS}; do
    if ! command -v "${cmd}" &> /dev/null; then
        error "Can not find command ${cmd}, please install the tool before startinrg this script"
        exit 1
    fi
done

# Check for NVM:
if ! declare -f nvm &> /dev/null; then
    if [ -z "${NVM_DIR}" ]; then
        error "Can not find nvm directory variable.... please install nvm and/or set NVM_DIR"
        echo "to install nvm:"
        echo "curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash"
        exit 1
    fi

    if [ ! -s "$NVM_DIR/nvm.sh" ]; then 
        error "Can not find nvm script, please install NVM first"
        echo "to install nvm:"
        echo "curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash"
        exit 1
    fi
    # shellcheck disable=SC1090
    source "$NVM_DIR/nvm.sh"  # This loads nvm
fi

if ! declare -f nvm &> /dev/null; then
    error "Failed to load nvm??"
    exit 1
fi


# -- argument checks

VERSION=$1
if [ -z "$1" ]; then
    error "Missing version argument:"
    echo "Usage: "
    echo ""
    echo "$0 <VERSION> [suffix]"
    echo ""
    echo "example:"
    echo "$0 3.9.0 rc1"
    exit 1
fi

VERSUFFIX=""
if [ -n "$2" ]; then
    VERSUFFIX=$2
fi

FULL_VERSION=${VERSION}${VERSUFFIX}

BRANCH_SUFFIX=$(echo "${FULL_VERSION}" | awk -F '.' -e '{print $1 "." $2 ".x"}')
BRANCH="release/${BRANCH_SUFFIX}"
TAG="${FULL_VERSION}"

COMMIT_PREFIX="[${FULL_VERSION} release process] "

# Sanity checks:

if [ ! -d .git ] || [ ! -d "cms" ]; then
    error "Must be a django-cms source repo, can not find .git or 'cms'... aborting"
    exit 1
fi

# check that git is configured for commit
if ! git config user.name || ! git config user.email; then
    error "Git must be configured for commit, please run the following commands first:"
    echo ""
    echo 'git config --local user.email "you@example.com"'
    echo 'git config --local user.name "Your Name"'
    echo ""
    echo "or use --global to configure your git for all repo by default"
    exit 1
fi

origin=$(git remote -v | grep push | grep origin | awk '{print $2}')

if [ -z "${origin}" ]; then
    error "no 'origin' remote configured, please configure the origin to your fork"
    exit 1
fi

if echo "${origin}" | grep -q "${upstream_pattern}"; then
    error "please configure the origin to your fork, not official django CMS origin ${origin}"
    exit 1
fi

if [ -z "${VIRTUAL_ENV}" ]; then
    error "Please run this script within a virtualenv!"
    echo "you can create an environment with the following command: "
    echo "virtualenv -p python3 --prompt "django-cms-release " env"
    exit 1
fi

# bump the version
OLDVER=$(python -c "import cms; print(cms.__version__)" )

# check if the tag does not already exist
if git tag | grep -q "\<${TAG}\>"; then
    error "It appears tag ${TAG} already exists! aborting"
    exit 1
fi



##
## Let's roll it
##

status "****************************************************************************************"
status "***                      django CMS OFFICIAL RELEASE PROCESS                         ***"
status "****************************************************************************************"
echo ""
echo -e "${RED}WARNING!${NORMAL} This script will ${RED}REVERT ALL LOCAL MODIFICATIONS!${NORMAL}"
echo ""
echo -e "Preparing to create a release ${GREEN}${FULL_VERSION}${NORMAL} from content of ${YELLOW}${base_branch}${NORMAL} (currently version ${YELLOW}${OLDVER}${NORMAL})"
echo "using fork: ${origin}"
echo ""
status "(Ctrl-C to abort, ${BLUE}Enter${YELLOW} to continue)"
read -r


# ensuring we have the proper env installed in pip
status "- Installing needed python & node packages"
grep -v django-cms docs/requirements.txt | xargs pip install --quiet django-admin transifex-client

CMDS="django-admin "
for cmd in ${CMDS}; do
    if ! command -v "${cmd}" &> /dev/null; then
        error "Can not find command ${cmd}, please install the tool before startinrg this script"
        exit 1
    fi
done

# checkinrg upstream really point to djangoCMS
status "- Setting up upstream to ${upstream_source}"

upstream=$(git remote -v | grep fetch | grep upstream | awk '{print $2}')
if [ "${upstream_source}" != "${upstream}" ]; then
    if [ -n "${upstream}" ]; then
        git remote remove upstream
    fi
    git remote add upstream ${upstream_source}
fi

status "- Cleaning the environment:"
# first go to develop and ensure we got the latest and greatest
git checkout "${base_branch}"
git clean -dfx
git restore --staged .
git checkout .
git pull upstream "${base_branch}"

# installing needed nodejs module
cd cms
nvm install 6
nvm use 6
npm install --loglevel warn
npm install gulp --loglevel warn

status "- syncing fork"
# updating the local repository, and pushing this to fork
git pull upstream ${base_branch}
git push -u origin ${base_branch}

status "- preparing branch ${BRANCH}"
# checking if the branch exists?
if ! git branch -a | grep -q "remotes/upstream/${BRANCH}"; then
    git checkout -b "${BRANCH}"
    git push upstream "${BRANCH}"
else
    echo "You appear to already have a ${BRANCH} created, using it"
    git checkout "${BRANCH}"
    git pull upstream "${BRANCH}"
fi

# cleaning on the branch
git clean -f
git checkout .

# 2.2: make messages and push them

status "- Creating transifex messages!"

"$SCRIPTS/transifex-send-strings"

git diff-index --quiet HEAD locale || git commit locale -m "${COMMIT_PREFIX}Building locales"

echo ""
status "****************************************************************************************"
status "***                      Preparing for actual release!!                              ***"
status "****************************************************************************************"
echo ""
echo -e " This is your ${RED}LAST CHANCE TO CANCEL${NORMAL}"
echo -e "(Ctrl-C to cancel, ${BLUE}Enter${NORMAL} to continue)"
read -r


# 2.3 Check sphinx configuration (check the doc for version or things should not be there)
# Trigger a travis build on the current develop state

status "- Bumping version to ${FULL_VERSION}"
# bump the version
sed -i __init__.py -e "s/__version__ = '.*'/__version__ = '$FULL_VERSION'/"
git commit __init__.py -m "${COMMIT_PREFIX}Bumped version to ${FULL_VERSION}"

status "- Fetching strings from transifex"
"${SCRIPTS}/transifex-pull-strings"

# Before compiling:
# ignore changesets that only involeves "^POT-Creation-Date:" "^PO-Revision-Date:"
git diff-index --quiet HEAD locale || git commit locale -m "${COMMIT_PREFIX}compilemessages"
cd ..

status "- generating assets/static"

gulp icons
gulp sass
gulp bundle


# remove old versions 
git rm -rf "cms/static/cms/css/${OLDVER}" "cms/static/cms/fonts/${OLDVER}" 
git add "cms/static/cms/css/${FULL_VERSION}" "cms/static/cms/fonts/${FULL_VERSION}"
git commit cms/static -m "${COMMIT_PREFIX}compiling new static files"


status "- preparing documentation"
"${SCRIPTS}/make-changelog" "${FULL_VERSION}"

upgrade_doc="docs/upgrade/${VERSION}.rst"

if [ ! -f "docs/upgrade/${VERSION}.rst" ]; then
    echo "Creating upgrade instructions"

    # looking for last upgrade by version number:
    needle=$OLDVER
    while [ -n "${needle}" ] && [ ! -f "docs/upgrade/${needle}.rst" ]; do
        last=$(echo "${needle}" | awk -F '.' '{print $NF}')
        echo "looking for docs/upgrade/${needle}.rst as base template"
        if [ "${last}" -gt 0 ]; then
            last=$(( last - 1 ))
            #shellcheck disable=SC2001
            needle=$(echo "${needle}" | sed -e "s/\.[0-9]\+\$/.${last}/")
        else
            #shellcheck disable=SC2001
            needle=$(echo "${needle}" | sed -e 's/\.[0-9]\+$//')
        fi
    done

    while [ ! -f "docs/upgrade/${needle}.rst" ]; do
        error "Can not find docs/upgrade/${needle}.rst"
        status "Can not find base version to create upgrade instructions (from $OLDVER)"
        echo  -e "Please ${BLUE}enter base version${NORMAL} to use (ex: 3.8) (Ctrl-C to abort)"
        ls docs/upgrades/
        read -r needle
    done

    cp "docs/upgrade/${needle}.rst" "${upgrade_doc}"
    git add "docs/upgrade/${VERSION}.rst"

    sed -i "${upgrade_doc}" \
        -e "s/^.. _upgrade-to-.*:$/.. _upgrade-to-${VERSION}:/" \
        -e "s/^${needle}.* release notes$/${VERSION} release notes/i" \
        -e "s/^What's new in ${needle}.*$/What's new in ${VERSION}/i" \
        -e "s/^How to upgrade to ${needle}.*$/How to upgrade to ${VERSION}/i" \
        -e "s/^We assume you are upgrading from django CMS.*\.$/We assume you are upgrading from django CMS ${needle}./"
fi

if ! grep -q " *${VERSION}$" docs/upgrade/index.rst; then
    status "Adding ${VERSION} to doc index"
    # note: the new line in the following command is not a mistake, it is needed for sed to process the command
    sed -i docs/upgrade/index.rst -e "/:maxdepth: 1/{N;a\ \ \ \ ${VERSION}
}"
fi

review "${upgrade_doc}"
review CHANGELOG.rst
review docs/upgrade/index.rst
review docs/conf.py

# commit documentations
git diff-index --quiet HEAD docs CHANGELOG.rst || git commit -m "${COMMIT_PREFIX}updating latest docs" "${upgrade_doc}" CHANGELOG.rst docs/upgrade/index.rst docs/conf.py

# update the blog post using the What's new section
status "Uploading to fork"
git push -u origin "${BRANCH}"

success "Release process complete on the fork"
echo -e "To complete the process:"
echo -e "1. ${BLUE}Please create a Pull Request${NORMAL} from your fork to ${YELLOW}${BRANCH}${NORMAL}"
echo -e "2. When the PR is merged in target branch, execute: ${BLUE}git tag ${TAG}; git push upstream ${TAG}"
echo -e "3. Create a PR from ${BRANCH} to ${base_branch}"
success "Enjoy!"
